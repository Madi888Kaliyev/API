# Тестовое задание: Веб-сервис для мебельного магазина (для джуниоров)

## Описание
Необходимо разработать REST API для мебельного магазина. Сервис позволяет просматривать каталог мебели и создавать заказы. Задание рассчитано на 1 день (6–8 часов). Код должен быть простым, читаемым, соответствовать принципам KISS и DRY. Основной фокус — на функциональности, работе с базой данных и базовой настройке DevOps.

## Требования
1. **Технологии**:
   - Backend: Django REST Framework или FastAPI (на выбор кандидата).
   - База данных: PostgreSQL.
   - Контейнеризация: Docker и docker-compose для запуска приложения и базы данных.
   - Код должен быть структурированным, понятным, без лишней сложности.
2. **Функционал**:
   - Модель `Furniture` (мебель): название, цена, категория (например, стол, стул, диван).
   - Модель `Order` (заказ): email клиента, список товаров, общая сумма, дата создания.
   - API endpoints:
     - `GET /furniture/` — список всей мебели.
     - `GET /furniture/:id/` — информация о конкретном товаре.
     - `POST /orders/` — создание заказа (принимает email клиента и список ID товаров, рассчитывает сумму).
     - `GET /orders/` — список заказов по email клиента (query-параметр `email`).
   - Аутентификация: не требуется, email клиента передается в теле запроса для создания заказа.
3. **DevOps**:
   - Настройте `Dockerfile` для сборки приложения.
   - Настройте `docker-compose.yml` для запуска сервиса и PostgreSQL.
   - Используйте переменные окружения для конфигурации (например, `DATABASE_URL`, секретный ключ).
5. **Документация**:
   - В `README.md` опишите, как запустить проект и кратко перечислите API endpoints.

## Опциональные задачи (для бонусных баллов):
1. **Фильтрация**:
   - Добавьте фильтрацию мебели по категории через query-параметр (например, `/furniture/?category=table`).
2. **Отправка email**:
   - При создании заказа отправляйте письмо клиенту на указанный email с деталями заказа (например, список товаров и сумма). Используйте SMTP (например, через `smtplib` в Python или `django.core.mail` для Django). Для тестирования можно использовать локальный SMTP-сервер (например, MailHog в docker-compose).
3. **Логирование**:
   - Настройте простое логирование запросов в файл или консоль (используйте модуль `logging`).

## Критерии оценки
- **Корректность**: API работает согласно требованиям, без багов.
- **Чистота кода**: Код простой, читаемый, структурированный (KISS, DRY).
- **Производительность**: Минимум запросов к БД, добавьте индексы для полей, по которым идет фильтрация (например, категория или email).
- **DevOps**: Корректная настройка Docker и docker-compose, использование переменных окружения.
- **Документация**: Четкий `README.md` с инструкциями по запуску.

## Ограничения
- Не усложняйте архитектуру (YAGNI). Избегайте сложных паттернов или дополнительных инструментов, если они не указаны.
- Подсчет суммы заказа делайте в коде (Python), а не в SQL.
- Срок выполнения: 1 день (6–8 часов).

## Риски и trade-offs
- **Django vs FastAPI**: Django проще для джуниоров за счет готовых инструментов (DRF, настройки БД), но FastAPI легче в освоении и быстрее для простых API. Выбирайте по своему опыту.
- **Email-уведомления**: Настройка SMTP (например, через MailHog) добавляет сложность, но демонстрирует навыки работы с внешними сервисами. Если времени мало, сосредоточьтесь на основном функционале.
- **Docker**: Используйте легкие образы для уменьшения размера контейнера.

## Примерный план работы
1. Настройте проект (Django/FastAPI, зависимости, структура).
2. Создайте модели и миграции для PostgreSQL.
3. Реализуйте API endpoints.
4. Настройте Docker и docker-compose.
6. Создайте `README.md`.
7. (Опционально) Добавьте фильтрацию или email-уведомления.

## Примечание по email-уведомлениям
Для опциональной задачи с отправкой email:
- Используйте MailHog (локальный SMTP-сервер) в docker-compose для тестирования.
- Настройте отправку письма с информацией о заказе (например, "Ваш заказ: стол – $100, стул – $50, итого: $150").
- Убедитесь, что SMTP-сервер указан в переменных окружения (например, `SMTP_HOST`, `SMTP_PORT`).

Удачи! Отправьте решение в виде ссылки на GitHub-репозиторий.